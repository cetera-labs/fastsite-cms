'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const pluginUtil = require(`./pluginUtil`); // process.stdin.resume();
// process.on('SIGINT', function () {
//   console.log('Got SIGINT.  Press Control-D to exit.');
// });


class ExtWebpackPlugin {
  constructor(options) {
    var constructorOutput = pluginUtil._constructor(options);

    this.vars = constructorOutput.vars;
    this.options = constructorOutput.options;
  }

  apply(compiler) {
    const vars = this.vars;
    const options = this.options;
    const app = this.app;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK thisCompilation`);

      pluginUtil._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    }); //var cRun = 0;

    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK compilation`); //if (cRun == 0) {

      pluginUtil._compilation(compiler, compilation, vars, options); //}
      //cRun++;

    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      pluginUtil.logh(app, `HOOK afterCompile`);

      pluginUtil._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      pluginUtil.logh(app, `HOOK emit (async)`);

      pluginUtil._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.done.tap(`ext-done`, stats => {
      pluginUtil.logh(app, `HOOK done`);

      pluginUtil._done(stats, vars, options);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicGx1Z2luVXRpbCIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJjb25zdHJ1Y3Rvck91dHB1dCIsIl9jb25zdHJ1Y3RvciIsInZhcnMiLCJhcHBseSIsImNvbXBpbGVyIiwiYXBwIiwiaG9va3MiLCJjb25zb2xlIiwibG9nIiwidGhpc0NvbXBpbGF0aW9uIiwidGFwIiwiY29tcGlsYXRpb24iLCJsb2doIiwiX3RoaXNDb21waWxhdGlvbiIsInBsdWdpbkVycm9ycyIsImxlbmd0aCIsImVycm9ycyIsInB1c2giLCJFcnJvciIsImpvaW4iLCJfY29tcGlsYXRpb24iLCJhZnRlckNvbXBpbGUiLCJfYWZ0ZXJDb21waWxlIiwiZW1pdCIsInRhcEFzeW5jIiwiY2FsbGJhY2siLCJfZW1pdCIsImRvbmUiLCJzdGF0cyIsIl9kb25lIl0sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7OztBQUNBQSxPQUFPLENBQUMsaUJBQUQsQ0FBUDs7QUFDQSxNQUFNQyxVQUFVLEdBQUdELE9BQU8sQ0FBRSxjQUFGLENBQTFCLEMsQ0FFQTtBQUVBO0FBQ0E7QUFDQTs7O0FBR2UsTUFBTUUsZ0JBQU4sQ0FBdUI7QUFFcENDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFFBQUlDLGlCQUFpQixHQUFHSixVQUFVLENBQUNLLFlBQVgsQ0FBd0JGLE9BQXhCLENBQXhCOztBQUNBLFNBQUtHLElBQUwsR0FBWUYsaUJBQWlCLENBQUNFLElBQTlCO0FBQ0EsU0FBS0gsT0FBTCxHQUFlQyxpQkFBaUIsQ0FBQ0QsT0FBakM7QUFDRDs7QUFFREksRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxVQUFNRixJQUFJLEdBQUcsS0FBS0EsSUFBbEI7QUFDQSxVQUFNSCxPQUFPLEdBQUcsS0FBS0EsT0FBckI7QUFDQSxVQUFNTSxHQUFHLEdBQUcsS0FBS0EsR0FBakI7O0FBRUEsUUFBSSxDQUFDRCxRQUFRLENBQUNFLEtBQWQsRUFBcUI7QUFDbkJDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGVBQVo7QUFDQTtBQUNEOztBQUVESixJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZUcsZUFBZixDQUErQkMsR0FBL0IsQ0FBb0Msc0JBQXBDLEVBQTREQyxXQUFELElBQWlCO0FBQzFFZixNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixzQkFBdEI7O0FBQ0FULE1BQUFBLFVBQVUsQ0FBQ2lCLGdCQUFYLENBQTRCVCxRQUE1QixFQUFzQ08sV0FBdEMsRUFBbURULElBQW5ELEVBQXlESCxPQUF6RDs7QUFFQSxVQUFJRyxJQUFJLENBQUNZLFlBQUwsQ0FBa0JDLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDSixRQUFBQSxXQUFXLENBQUNLLE1BQVosQ0FBbUJDLElBQW5CLENBQXlCLElBQUlDLEtBQUosQ0FBVWhCLElBQUksQ0FBQ1ksWUFBTCxDQUFrQkssSUFBbEIsQ0FBdUIsRUFBdkIsQ0FBVixDQUF6QjtBQUNBO0FBQ0Q7QUFDRixLQVJELEVBVmMsQ0FvQmQ7O0FBQ0FmLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlSyxXQUFmLENBQTJCRCxHQUEzQixDQUFnQyxpQkFBaEMsRUFBbURDLFdBQUQsSUFBaUI7QUFDakVmLE1BQUFBLFVBQVUsQ0FBQ2dCLElBQVgsQ0FBZ0JQLEdBQWhCLEVBQXNCLGtCQUF0QixFQURpRSxDQUVqRTs7QUFDRVQsTUFBQUEsVUFBVSxDQUFDd0IsWUFBWCxDQUF3QmhCLFFBQXhCLEVBQWtDTyxXQUFsQyxFQUErQ1QsSUFBL0MsRUFBcURILE9BQXJELEVBSCtELENBSWpFO0FBQ0E7O0FBQ0QsS0FORDtBQVFBSyxJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZWUsWUFBZixDQUE0QlgsR0FBNUIsQ0FBZ0MsbUJBQWhDLEVBQXNEQyxXQUFELElBQWlCO0FBQ3BFZixNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixtQkFBdEI7O0FBQ0FULE1BQUFBLFVBQVUsQ0FBQzBCLGFBQVgsQ0FBeUJsQixRQUF6QixFQUFtQ08sV0FBbkMsRUFBZ0RULElBQWhELEVBQXNESCxPQUF0RDtBQUNELEtBSEQ7QUFLQUssSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVpQixJQUFmLENBQW9CQyxRQUFwQixDQUE4QixVQUE5QixFQUF5QyxDQUFDYixXQUFELEVBQWNjLFFBQWQsS0FBMkI7QUFDbEU3QixNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixtQkFBdEI7O0FBQ0FULE1BQUFBLFVBQVUsQ0FBQzhCLEtBQVgsQ0FBaUJ0QixRQUFqQixFQUEyQk8sV0FBM0IsRUFBd0NULElBQXhDLEVBQThDSCxPQUE5QyxFQUF1RDBCLFFBQXZEO0FBQ0QsS0FIRDtBQUtBckIsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVxQixJQUFmLENBQW9CakIsR0FBcEIsQ0FBeUIsVUFBekIsRUFBcUNrQixLQUFELElBQVc7QUFDN0NoQyxNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixXQUF0Qjs7QUFDQVQsTUFBQUEsVUFBVSxDQUFDaUMsS0FBWCxDQUFpQkQsS0FBakIsRUFBd0IxQixJQUF4QixFQUE4QkgsT0FBOUI7QUFDRCxLQUhEO0FBSUQ7O0FBbkRtQyIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5yZXF1aXJlKCdAYmFiZWwvcG9seWZpbGwnKVxuY29uc3QgcGx1Z2luVXRpbCA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApXG5cbi8vIHByb2Nlc3Muc3RkaW4ucmVzdW1lKCk7XG5cbi8vIHByb2Nlc3Mub24oJ1NJR0lOVCcsIGZ1bmN0aW9uICgpIHtcbi8vICAgY29uc29sZS5sb2coJ0dvdCBTSUdJTlQuICBQcmVzcyBDb250cm9sLUQgdG8gZXhpdC4nKTtcbi8vIH0pO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4dFdlYnBhY2tQbHVnaW4ge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RydWN0b3JPdXRwdXQgPSBwbHVnaW5VdGlsLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICAgIHRoaXMudmFycyA9IGNvbnN0cnVjdG9yT3V0cHV0LnZhcnNcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25zdHJ1Y3Rvck91dHB1dC5vcHRpb25zXG4gIH1cblxuICBhcHBseShjb21waWxlcikge1xuICAgIGNvbnN0IHZhcnMgPSB0aGlzLnZhcnNcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHBcblxuICAgIGlmICghY29tcGlsZXIuaG9va3MpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdub3Qgd2VicGFjayA0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29tcGlsZXIuaG9va3MudGhpc0NvbXBpbGF0aW9uLnRhcChgZXh0LXRoaXMtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIHBsdWdpblV0aWwubG9naChhcHAsIGBIT09LIHRoaXNDb21waWxhdGlvbmApXG4gICAgICBwbHVnaW5VdGlsLl90aGlzQ29tcGlsYXRpb24oY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zKVxuXG4gICAgICBpZiAodmFycy5wbHVnaW5FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb21waWxhdGlvbi5lcnJvcnMucHVzaCggbmV3IEVycm9yKHZhcnMucGx1Z2luRXJyb3JzLmpvaW4oXCJcIikpIClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vdmFyIGNSdW4gPSAwO1xuICAgIGNvbXBpbGVyLmhvb2tzLmNvbXBpbGF0aW9uLnRhcChgZXh0LWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLmxvZ2goYXBwLCBgSE9PSyBjb21waWxhdGlvbmApXG4gICAgICAvL2lmIChjUnVuID09IDApIHtcbiAgICAgICAgcGx1Z2luVXRpbC5fY29tcGlsYXRpb24oY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zKTtcbiAgICAgIC8vfVxuICAgICAgLy9jUnVuKys7XG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmFmdGVyQ29tcGlsZS50YXAoJ2V4dC1hZnRlci1jb21waWxlJywgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLmxvZ2goYXBwLCBgSE9PSyBhZnRlckNvbXBpbGVgKVxuICAgICAgcGx1Z2luVXRpbC5fYWZ0ZXJDb21waWxlKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuZW1pdC50YXBBc3luYyhgZXh0LWVtaXRgLCAoY29tcGlsYXRpb24sIGNhbGxiYWNrKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLmxvZ2goYXBwLCBgSE9PSyBlbWl0IChhc3luYylgKVxuICAgICAgcGx1Z2luVXRpbC5fZW1pdChjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIH0pXG5cbiAgICBjb21waWxlci5ob29rcy5kb25lLnRhcChgZXh0LWRvbmVgLCAoc3RhdHMpID0+IHtcbiAgICAgIHBsdWdpblV0aWwubG9naChhcHAsIGBIT09LIGRvbmVgKVxuICAgICAgcGx1Z2luVXRpbC5fZG9uZShzdGF0cywgdmFycywgb3B0aW9ucylcbiAgICB9KVxuICB9XG59XG4iXX0=